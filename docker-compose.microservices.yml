version: '3.8'

services:
  # ========================
  # INFRASTRUCTURE SERVICES
  # ========================
  
  # PostgreSQL for Kong
  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
      POSTGRES_DB: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - microservice-net

  # Kong Migration
  kong-migration:
    image: kong:3.4
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
    depends_on:
      - kong-database
    networks:
      - microservice-net

  # Kong Gateway
  kong-gateway:
    image: kong:3.4
    container_name: kong-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
    ports:
      - "8000:8000"   # Kong Proxy - Main API Entry Point
      - "8443:8443"   # Kong Proxy HTTPS
      - "8001:8001"   # Kong Admin API
      - "8002:8002"   # Kong Admin GUI
    depends_on:
      - kong-database
      - kong-migration
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - microservice-net

  # MongoDB for UserService
  mongodb:
    image: mongo:5.0
    container_name: microservice-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservice-net

  # Redis for caching and SocialService
  redis:
    image: redis:7-alpine
    container_name: microservice-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservice-net

  # RabbitMQ for SenderService
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: microservice-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password123
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservice-net

  # ========================
  # MICROSERVICES
  # ========================

  # UserService
  user-service:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - NODE_ENV=production
      - APP_PORT=3001
      - DATABASE_URL=mongodb://admin:password123@mongodb:27017/userservice?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ACCESS_TOKEN_KEY=your-secret-key-here
      - REFRESH_TOKEN_KEY=your-refresh-secret-key
      - INTERNAL_TOKEN_PUBLIC_KEY=your-internal-public-key
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
      - redis
    networks:
      - microservice-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SenderService
  sender-service:
    build:
      context: ./SenderService
      dockerfile: Dockerfile
    container_name: sender-service
    environment:
      - NODE_ENV=production
      - APP_PORT=3002
      - DATABASE_URL=mongodb://admin:password123@mongodb:27017/senderservice?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://admin:password123@rabbitmq:5672
      - RABBITMQ_NOTIFICATION=notification_queue
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
    ports:
      - "3002:3002"
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - microservice-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SocialService
  social-service:
    build:
      context: ./SocialService
      dockerfile: Dockerfile
    container_name: social-service
    environment:
      - NODE_ENV=production
      - APP_PORT=3003
      - DATABASE_URL=mongodb://admin:password123@mongodb:27017/socialservice?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://admin:password123@rabbitmq:5672
    ports:
      - "3003:3003"
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - microservice-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================
  # MONITORING & MANAGEMENT
  # ========================

  # Konga (Kong Admin UI)
  konga:
    image: pantsel/konga
    container_name: konga
    environment:
      NODE_ENV: production
      DB_ADAPTER: postgres
      DB_URI: postgresql://kong:kongpass@kong-database:5432/konga
    ports:
      - "1337:1337"
    depends_on:
      - kong-database
      - kong-gateway
    networks:
      - microservice-net

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus
    container_name: microservice-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservice-net

  # Grafana for visualization
  grafana:
    image: grafana/grafana
    container_name: microservice-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservice-net

volumes:
  kong_data:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  grafana_data:

networks:
  microservice-net:
    driver: bridge 